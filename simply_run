#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Lunch
# Copyright (C) 2008 Société des arts technologiques (SAT)
# http://www.sat.qc.ca
# All rights reserved.
#
# This file is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# Lunch is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Lunch. If not, see <http://www.gnu.org/licenses/>.

"""
Simply runs a process on the local machine.
Allows specifying environment variables.

examples: 

 ./simply_run -c glxgears -e DISPLAY :0.0
 
 ssh -X brrr rxvt -e "/home/aalex/src/postures/trunk/py/simply_run -c \"glxgears\" -e DISPLAY :0.0"
"""

import os
import sys
from optparse import OptionParser
import subprocess

def execute(command_str, variables_dict={}):
    """
    Creates and launches a process. 
    """
    print("RUNNING: %s" % (command_str))
    print("ENV: %s" % (str(variables_dict)))
    
    environment = {}
    environment.update(os.environ)
    environment.update(variables_dict)
    try:
        p = subprocess.Popen(command_str, shell=True, env=environment)
        print("PID: %s" % (p.pid))
        retcode = p.wait() # blocking
        if retcode < 0:
            err = "Child was terminated by signal %d\n" % (retcode)
            sys.stderr.write(err)
            sys.exit(retcode)
        else:
            err = "Child returned %s\n" % (retcode)
            sys.stderr.write(err)
            sys.exit(retcode)
    except OSError, e:
        err = "Execution failed: %s\n" % (e.message)
        sys.stderr.write(err)
        sys.exit(1)
    except ValueError, e:
        err = "Wrong arguments to subprocess.Popen: %s\n" % (e.message)
        sys.stderr.write(err)
        raise
        # sys.exit(1)
    except KeyboardInterrupt, e:
        err = "Control-C has been pressed.\n"
        sys.stderr.write(err)
    else:
        print("Success\n")
        sys.exit(0)

__version__ = "0.1"
EPILOG = """Lunch is a process launcher for POSIX Operating systems."""
#CONFIG_FILE = "~/.lunch/config"

if __name__ == "__main__":
    parser = OptionParser(usage="%prog [options]", version=__version__, epilog=EPILOG)
    # parser.add_option("-s", "--slave", action="store_true", "Starts a command.")
    # parser.add_option("-f", "--config-file", type="string", default=os.path.expanduser(CONFIG_FILE), help="If run as master, specifies the python config file.")
    # parser.add_option("-v", "--verbose", action="store_true")
    parser.add_option("-c", "--command", type="string", help="command to execute")
    parser.add_option("-e", "--environment", action="append", nargs=2, \
        help="Sets an environment variable with key/value pair.")
    (options, args) = parser.parse_args()
    
    if True: # options.slave: # slave
        if not options.command:
            print("You must provide a command to execute. (the -c option) Try -h to get help.")
            parser.print_usage()
        else:
            variables_dict = {} # dict of environment variables
            if options.environment:
                variables_dict = options.environment
            execute(options.command, variables_dict)
    # TODO: master mode

