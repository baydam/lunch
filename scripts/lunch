#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Lunch
# Copyright (C) 2009 Société des arts technologiques (SAT)
# http://www.sat.qc.ca
# All rights reserved.
#
# This file is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# Lunch is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Lunch.  If not, see <http://www.gnu.org/licenses/>.
"""
Tools for process management.
"""
__version__ = "0.2.2"
DESCRIPTION = "Lunch is a distributed process manager for GNU/Linux. The Lunch slave must be installed on every host on which processes are to be run. The Lunch master launches slaves processes through an encrypted SSH session if on a remote host. Those slave processes can in turn launch the desired commands on-demand."
SCRIPTS_DIR = "scripts"
def _is_in_devel():
    d = os.path.split(os.path.dirname(os.path.abspath(__file__)))[1]
    return d == SCRIPTS_DIR

if __name__ == "__main__":
    """
    Runs the application.
    """
    import os
    import sys
    from optparse import OptionParser
    parser = OptionParser(usage="%prog [options]", version="%prog " + __version__, description=DESCRIPTION)
    parser.add_option("-f", "--config-file", type="string", help="If run as master, specifies the python config file.")
    #parser.add_option("-l", "--log-file", type="string", help="Specifies the log file to write to.")
    (options, args) = parser.parse_args()
    if options.config_file:
        config_file = options.config_file
    DEFAULT_CONFIG_FILE = os.path.expanduser("~/.lunchrc")
    if len(args) == 1 and not options.config_file: 
        #log.msg("DEBUG: overriding config_file with %s" % (args[0])) 
        config_file = args[0] 
    else:
        config_file = DEFAULT_CONFIG_FILE
    
    if not os.path.exists(config_file):
        print("No such file: %s." % (config_file))
        sys.exit(1)
    if _is_in_devel():
        d = os.path.split(os.path.dirname(os.path.abspath(__file__)))[0]
        sys.path.insert(0, d)
        os.environ["PATH"] += ":%s" % (os.path.join(d, SCRIPTS_DIR))
    from lunch.master import run_master
    from lunch.master import FileNotFoundError
    from twisted.internet import reactor
    try:
        #print("DEBUG: using config_file %s" % (config_file))
        master = run_master(config_file)
    except FileNotFoundError, e:
        print("Error starting lunch as master.")
        print(e.message)
        print("A configuration file is missing. Try the --help flag.")
        sys.exit(1)
    try:
        reactor.run()
    except KeyboardInterrupt:
        #log.msg("Ctrl-C in Master.", logging.INFO)
        #master.quit_master()
        reactor.stop()
